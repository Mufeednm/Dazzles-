generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model login {
  loginId      Int     @id @default(autoincrement())
  userName     String  @db.Char(50)
  userPassword String  @db.Char(255)
  userRole     Int     @default(1)
  userStore    Int     @default(1)
  userStatus   Boolean @default(true)
}

model global_permission {
  permissionId Int              @id @default(autoincrement())
  permission   String           @db.VarChar(100)
  roles         role_permissions[]  // Cascade on delete
}

model role {
  roleId      Int              @id @default(autoincrement())
  roleName    String
  permissions role_permissions[]  // Cascade on delete
  users       user_roles[] 
}

model users {
  userId       Int        @id @default(autoincrement())
  userName     String     @db.VarChar(255)
  userEmail    String     @db.VarChar(255)
  userPassword String     @db.VarChar(255)
  userStore    Int
  create_at    DateTime   @default(now()) @db.Timestamp(6)
  update_at    DateTime?  @db.Timestamp(6)
  isDeleted    Boolean    @default(false)
  roles        user_roles[]  // Cascade on delete
}

model user_roles {
  id         Int      @id @default(autoincrement())
  userId     Int
  roleId     Int
  assignedAt DateTime @default(now())
  role       role     @relation(fields: [roleId], references: [roleId], onDelete: Cascade) // Cascade on delete
  user       users    @relation(fields: [userId], references: [userId], onDelete: Cascade) // Cascade on delete

  @@unique([userId, roleId])
}

model role_permissions {
  id           Int               @id @default(autoincrement())
  roleId       Int
  permissionId Int
  assignedAt   DateTime          @default(now())
  updateAt     DateTime?
  permission   global_permission @relation(fields: [permissionId], references: [permissionId], onDelete: Cascade) // Cascade on delete
  role         role              @relation(fields: [roleId], references: [roleId], onDelete: Cascade) // Cascade on delete

  @@unique([roleId, permissionId])
}
